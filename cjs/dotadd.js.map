{"version":3,"sources":["../build/dotadd.js"],"names":["is_valid_string","str","validateProp","prop","validator","assign_if_valid","me","from","to","assign_if_valid_recurse","props","length","hasOwnProperty","nextp","shift","Filter","constructor","high","low","Error","hi","lo","isLowpass","isHighpass","isBandpass","makeLowpass","freq","makeHighpass","fromObject","obj","Normalisation","Object","freeze","N3D","SN3D","ACN","order","acn","Math","floor","sqrt","index","pow","maxChannels","Matrix","input","normalisation","channels","toLowerCase","csize","channel","matrix","setInput","getInput","numCoeffs","numChannels","setCoeffsForChannel","chan","coeffs","getCoeffsForChannel","ambisonicOrder","setNormalisation","getNormalisation","renormalizeTo","forEach","ch","coeff","cidx","valid","len","AEDCoord","a","e","d","hasDistance","OutputChannel","name","type","options","description","coords","ret","assign","ADD","add","revision","inv_reasons","pobj","String","JSON","parse","toString","decoder","filter","matrices","output","map","mat","_set","val","export","export_obj","author","date","version","flt","chs","Array","serialize","stringify","setAuthor","setName","setDescription","desc","setDate","Date","toISOString","setVersion","createDefaultMetadata","dateValid","now","repair","hasNoOutputs","createDefaultSummedOutputs","totalMatrixOutputs","clearInvMessageCache","invalidateWith","Number","parseInt","NaN","validateDecodingMatrices","validateOutputs","addMatrix","push","addFilter","addOutput","out","addOutputAndFillMatrix","gain","channel_num","fill","maxAmbisonicOrder","max","reduce","maxMatrixOutputCount","numOutputs","createDefaultOutputs","midx","i","arr","createDefaultOutputMatrix","refitOutputChannels","pop","refitOutputMatrix","ol","l","reason","isNaN","inputs","mixer_inputs","find","m","undefined"],"mappings":"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","sourcesContent":["function is_valid_string(str) {\n    return (str) && str != '';\n}\nfunction validateProp(prop, validator) {\n    if (typeof validator == 'string')\n        return typeof prop == validator;\n    else\n        return validator(prop);\n}\nfunction assign_if_valid(me, from, validator, ...prop) {\n    let to = me;\n    assign_if_valid_recurse(to, from, validator, prop);\n}\nfunction assign_if_valid_recurse(me, from, validator, props) {\n    if (props.length === 1) {\n        if (from.hasOwnProperty(props[0]) && validateProp(from[props[0]], validator))\n            me[props[0]] = from[props[0]];\n    }\n    else {\n        let nextp = props.shift();\n        if (from.hasOwnProperty(nextp) && validateProp(from[nextp], 'object')) {\n            if (!me.hasOwnProperty(nextp))\n                me[nextp] = {};\n            assign_if_valid_recurse(me[nextp], from[nextp], validator, props);\n        }\n    }\n}\n/**\n * The dotadd Filter class. Respresents a single filter band.\n */\nexport class Filter {\n    /**\n     * Construct a new Filterband. At least high or low must be given to construct a valid filter band object\n     * @param high beginning of the high frequency stopbband can be null\n     * @param low beginning of the high frequency stopbband can be null or omitted\n     */\n    constructor(high, low) {\n        if ((high == null) && (low == null))\n            throw new Error('Cannot construct a Filterband without frequencies');\n        if (high != null)\n            this.hi = high;\n        if (low != null)\n            this.lo = low;\n    }\n    isLowpass() {\n        return this.lo == null && this.hi != null;\n    }\n    isHighpass() {\n        return this.hi == null && this.lo != null;\n    }\n    isBandpass() {\n        return this.hi != null && this.lo != null;\n    }\n    static makeLowpass(freq) {\n        return new Filter(freq);\n    }\n    static makeHighpass(freq) {\n        return new Filter(null, freq);\n    }\n    static fromObject(obj) {\n        return new Filter(obj.hi, obj.lo);\n    }\n}\nexport const Normalisation = Object.freeze({\n    N3D: 'n3d',\n    SN3D: 'sn3d'\n});\n/**\n * Function to handle Ambisonic Channel Numbers (ACN)\n */\nexport const ACN = {\n    /**\n     * Get the Ambisonic Order (l) from an ACN\n     * @param acn ACN\n     */\n    order(acn) {\n        return Math.floor(Math.sqrt(acn));\n    },\n    /**\n     * Get the Ambisonic Index (n) from an ACN\n     * @param acn ACN\n     */\n    index(acn) {\n        let order = ACN.order(acn);\n        return acn - order * (order + 1);\n    },\n    /**\n     * Calculate an ACN from Order l and Index n\n     * @param order Ambisonic Order (l)\n     * @param index Ambisonic Index (n)\n     */\n    acn(order, index) {\n        return Math.pow(order, 2) * order + index;\n    },\n    /**\n     * Calculate the maximum channels needed for a given ambisonic order. Returns (order+1)^2\n     */\n    maxChannels(order) {\n        return Math.pow(order + 1, 2);\n    }\n};\n/**\n * The dotadd Matrix class. Is holds the decoding matrix coefficents and a field\n * which specifies the input band it receives audio from\n */\nexport class Matrix {\n    /**\n     * Construct a new Matrix.\n     * @param {number} input the input band the matrix will receive signal from\n     * @param {number[][]} channels an array of array of coefficents for the output channels of the matrix.\n     */\n    constructor(input, normalisation, channels) {\n        this.input = input;\n        this.normalisation = normalisation.toLowerCase();\n        if (channels && channels.length) {\n            let csize = channels[0].length;\n            for (let channel of channels) {\n                if (channel.length != csize)\n                    throw new Error(\"channel size mismatch\");\n            }\n            this.matrix = channels;\n        }\n    }\n    /**\n     * Set the input band the Matrix will receive signal from\n     * @param {Number} input\n     */\n    setInput(input) {\n        this.input = input;\n    }\n    /**\n     * @returns {Number} the input channel this Matrix will receive signal from\n     */\n    getInput() {\n        return this.input;\n    }\n    /**\n     * @returns {Number} the input number of coeffs for each channel\n     */\n    numCoeffs() {\n        if (this.matrix)\n            return this.matrix[0].length;\n        else\n            return 0;\n    }\n    /**\n     * @returns the number of channels in the matrix\n     */\n    numChannels() {\n        if (this.matrix)\n            return this.matrix.length;\n        else\n            return 0;\n    }\n    /**\n     * set the coefficents for a channels in the Matrix\n     * @param {Number} chan the channel number to set\n     * @param {Array<Number>} coeffs an array of coefficents\n     */\n    setCoeffsForChannel(chan, coeffs) {\n        if (!(this.matrix))\n            this.matrix = [];\n        this.matrix[chan] = coeffs;\n    }\n    /**\n     * get the coefficents for a channel in the Matrix\n     * @param {number} chan the channel number\n     * @returns {number[]} an array of coefficents\n     */\n    getCoeffsForChannel(chan) {\n        if (!(this.matrix))\n            return;\n        return this.matrix[chan];\n    }\n    /**\n     * Get the Ambisonic Order (l) from this decoding matrix\n     */\n    ambisonicOrder() {\n        return ACN.order(this.numCoeffs() - 1);\n    }\n    /**\n     * Set the normalisation the matrix has. This will not change any values other than the 'normalisation' field\n     * @param normalisation the Normalisation type ('n3d' or 'sn3d')\n     */\n    setNormalisation(normalisation) {\n        this.normalisation = normalisation.toLowerCase();\n    }\n    /**\n     *\n     */\n    getNormalisation() {\n        return this.normalisation;\n    }\n    /**\n     * change the normalisation of the matrix values\n     * @param normalisation the new normalisation type ('n3d' or 'sn3d')\n     */\n    renormalizeTo(normalisation) {\n        normalisation = normalisation.toLowerCase();\n        if (this.normalisation == normalisation)\n            return;\n        if (normalisation === Normalisation.N3D) {\n            this.matrix.forEach((ch) => {\n                ch.forEach((coeff, cidx) => {\n                    ch[cidx] = coeff * (Math.sqrt(2 * ACN.order(cidx) + 1));\n                });\n            });\n        }\n        else if (normalisation === Normalisation.SN3D) {\n            this.matrix.forEach((ch) => {\n                ch.forEach((coeff, cidx) => {\n                    ch[cidx] = coeff / (Math.sqrt(2 * ACN.order(cidx) + 1));\n                });\n            });\n        }\n        this.normalisation = normalisation;\n        return this;\n    }\n    valid() {\n        if (!this.matrix.length)\n            return false;\n        let len = this.matrix[0].length;\n        for (let ch of this.matrix) {\n            if (ch.length != len)\n                return false;\n        }\n        return true;\n    }\n    static fromObject(obj) {\n        return new Matrix(obj.input, obj.normalisation, obj.matrix);\n    }\n}\n/**\n * An AE(D) Coordinate. The distance value is optional\n */\nexport class AEDCoord {\n    /**\n     * construct a new AE(D) Coordinate\n     */\n    constructor(a, e, d) {\n        this.a = a;\n        this.e = e;\n        this.d = d;\n    }\n    /**\n     * true if the Coordinate has a distance value\n     */\n    hasDistance() {\n        return this.d != null;\n    }\n}\n/**\n * Output channel class. Represents a named output of an Ambisonic decoder.\n */\nexport class OutputChannel {\n    /**\n     *\n     * @param name name for the Output\n     * @param type type of output e.g. 'spk', 'sub', 'stereo-submix'\n     * @param options supply coordinates or a description for the output here\n     */\n    constructor(name, type, options) {\n        this.name = name;\n        this.type = type;\n        if (options) {\n            this.description = options.description;\n            this.coords = options.coords;\n        }\n    }\n    /**\n     * Create a new OutputChannel from a plain Javascript Object\n     */\n    static fromObject(obj) {\n        let ret = new OutputChannel(obj.name, obj.type);\n        if (obj.coords)\n            Object.assign(ret.coords, obj.coords);\n        if (obj.description)\n            ret.description = obj.description;\n        return ret;\n    }\n}\n/**\n * Where all the magic happens. The ADD Class.\n * Represents all properties of an ambisonic decoder that can be stored in a .add File\n */\nexport class ADD {\n    /**\n     * Construct a new ADD\n     * @param add\n     */\n    constructor(add) {\n        this.revision = 0;\n        this.inv_reasons = [];\n        let pobj = {};\n        if (typeof add == 'string' || add instanceof String)\n            pobj = JSON.parse(add.toString());\n        else if (add instanceof Object)\n            pobj = add;\n        this.decoder = { filter: [], matrices: [], output: { channels: [], matrix: [] } };\n        if (add) {\n            assign_if_valid(this, pobj, 'number', 'revision');\n            assign_if_valid(this, pobj, 'string', 'name');\n            assign_if_valid(this, pobj, 'string', 'author');\n            assign_if_valid(this, pobj, 'string', 'description');\n            assign_if_valid(this, pobj, 'string', 'date');\n            assign_if_valid(this, pobj, 'number', 'version');\n            if (pobj.decoder) {\n                if (pobj.decoder.filter)\n                    this.decoder.filter = pobj.decoder.filter.map(obj => Filter.fromObject(obj));\n                if (pobj.decoder.matrices)\n                    this.decoder.matrices = pobj.decoder.matrices.map(mat => Matrix.fromObject(mat));\n                if (pobj.decoder.output) {\n                    if (pobj.decoder.output.channels && pobj.decoder.output.matrix) {\n                        this.decoder.output = {\n                            channels: pobj.decoder.output.channels.map(channel => OutputChannel.fromObject(channel)),\n                            matrix: pobj.decoder.output.matrix || []\n                        };\n                    }\n                }\n            }\n        }\n    }\n    _set(prop, val) {\n        this[prop] = val;\n        return this;\n    }\n    export() {\n        if (!this.valid())\n            throw new Error('Cannot export invalid ADD');\n        let export_obj = {\n            name: this.name,\n            description: this.description,\n            author: this.author,\n            date: this.date,\n            revision: this.revision,\n            version: this.version,\n            decoder: {\n                filter: this.decoder.filter.map(flt => Filter.fromObject(flt)),\n                matrices: this.decoder.matrices.map(mat => {\n                    return {\n                        normalisation: mat.normalisation,\n                        input: mat.input,\n                        matrix: mat.matrix.map(chs => Array.from(chs))\n                    };\n                }),\n                output: {\n                    channels: this.decoder.output.channels.map(chan => OutputChannel.fromObject(chan)),\n                    matrix: this.decoder.output.matrix.map(chan => Array.from(chan))\n                }\n            },\n            serialize() {\n                return JSON.stringify(export_obj);\n            }\n        };\n        return export_obj;\n    }\n    setAuthor(author) { return this._set('author', author); }\n    setName(name) { return this._set('name', name); }\n    setDescription(desc) { return this._set('description', desc); }\n    setDate(date) { return this._set('date', new Date(date).toISOString()); }\n    setVersion(version) { return this._set('version', version); }\n    createDefaultMetadata() {\n        this.author = this.author || 'the dotadd library creators';\n        this.description = this.description || 'created with the dotadd.js library';\n        this.version = this.version || 0;\n        if (!this.dateValid())\n            this.date = new Date(Date.now()).toISOString();\n    }\n    repair() {\n        if (this.hasNoOutputs())\n            this.createDefaultSummedOutputs();\n        if (!this.valid())\n            this.createDefaultMetadata();\n        if (!this.valid()) {\n            if (this.decoder.output.channels.length != this.totalMatrixOutputs())\n                this.decoder.output.channels = [];\n            this.decoder.output.matrix = [];\n            this.createDefaultSummedOutputs();\n        }\n    }\n    valid() {\n        this.clearInvMessageCache();\n        if (!is_valid_string(this.name))\n            return this.invalidateWith('Missing or invalid \"name\" field');\n        if (!is_valid_string(this.author))\n            return this.invalidateWith('Missing or invalid \"author\" field');\n        if (!is_valid_string(this.description))\n            return this.invalidateWith('Missing or invalid \"author\" field');\n        if (this.version && Number.parseInt(this.version.toString()) == NaN)\n            return this.invalidateWith('Missing or invalid \"version\" field');\n        if (!this.dateValid())\n            return this.invalidateWith('Missing or invalid \"date\" field');\n        if (!this.validateDecodingMatrices())\n            return this.invalidateWith('Invalid decoding matrix configuration');\n        if (!this.validateOutputs())\n            return this.invalidateWith('Invalid output configuration');\n        return true;\n    }\n    addMatrix(mat) {\n        this.decoder.matrices.push(mat);\n    }\n    addFilter(flt) {\n        this.decoder.filter.push(flt);\n    }\n    addOutput(out) {\n        this.decoder.output.channels.push(out);\n    }\n    addOutputAndFillMatrix(out, gain) {\n        if (gain == null)\n            gain = 1.;\n        this.decoder.output.channels.push(out);\n        let channel_num = this.decoder.output.channels.length - 1;\n        this.decoder.output.matrix[channel_num]\n            = new Array(this.decoder.output.channels.length).fill(0);\n        this.decoder.output.matrix[channel_num][channel_num] = gain;\n        this.decoder.output.matrix.forEach(ch => {\n            while (ch.length != this.decoder.output.channels.length)\n                ch.push(0);\n        });\n    }\n    maxAmbisonicOrder() {\n        return Math.max(...this.decoder.matrices.map(mat => mat.ambisonicOrder()));\n    }\n    totalMatrixOutputs() {\n        return this.decoder.matrices.reduce((val, mat) => val + mat.numChannels(), 0);\n    }\n    maxMatrixOutputCount() {\n        return Math.max(...this.decoder.matrices.map(mat => mat.numChannels()));\n    }\n    numOutputs() {\n        return this.decoder.output.channels.length;\n    }\n    hasNoOutputs() {\n        return this.decoder.output.channels.length == 0\n            || this.decoder.output.matrix.length == 0;\n    }\n    createDefaultOutputs() {\n        this.decoder.matrices.forEach((mat, midx) => {\n            for (let i = 0; i < mat.numChannels(); ++i) {\n                this.decoder.output.channels.push(new OutputChannel(`DEFAULT_${midx}_${i}`, 'default'));\n                let arr = new Array(this.totalMatrixOutputs()).fill(0);\n                arr[i + ((midx) ? this.decoder.matrices[midx - 1].numChannels() : 0)] = 1.0;\n                this.decoder.output.matrix.push(arr);\n            }\n        });\n    }\n    createDefaultSummedOutputs() {\n        for (let i = 0; i < this.maxMatrixOutputCount(); ++i) {\n            this.decoder.output.channels.push(new OutputChannel(`DEFAULT_${i}`, 'default'));\n            this.decoder.output.matrix[i] = new Array(this.totalMatrixOutputs()).fill(0);\n        }\n        this.decoder.matrices.forEach((mat, midx) => {\n            for (let i = 0; i < mat.numChannels(); ++i)\n                this.decoder.output.matrix[i][(i + ((midx) ? this.decoder.matrices[midx - 1].numChannels() : 0))] = 1.0;\n        });\n    }\n    createDefaultOutputMatrix() {\n        this.decoder.output.matrix.length = 0;\n        for (let i = 0; i < this.numOutputs(); ++i) {\n            this.decoder.output.matrix.push(new Array(this.numOutputs()).fill(0));\n            this.decoder.output.matrix[this.decoder.output.matrix.length - 1][this.decoder.output.matrix.length - 1] = 1.;\n        }\n    }\n    refitOutputChannels() {\n        if (this.numOutputs() < this.totalMatrixOutputs()) {\n            while (this.numOutputs() != this.totalMatrixOutputs())\n                this.addOutput(new OutputChannel('DEFAULT', 'default'));\n        }\n        else if (this.numOutputs() > this.totalMatrixOutputs()) {\n            while (this.numOutputs() != this.totalMatrixOutputs())\n                this.decoder.output.channels.pop();\n        }\n    }\n    refitOutputMatrix() {\n        let ol = this.decoder.output.matrix.length;\n        if (ol > this.numOutputs()) {\n            this.decoder.output.matrix.length = this.numOutputs();\n            this.decoder.output.matrix\n                .map(ch => {\n                ch.length = this.numOutputs();\n                return ch;\n            });\n        }\n        else if (ol < this.numOutputs()) {\n            while (this.decoder.output.matrix.length != this.numOutputs())\n                this.decoder.output.matrix.push([]);\n            this.decoder.output.matrix.map((ch, i) => {\n                let l = ch.length;\n                while (ch.length != this.numOutputs())\n                    ch.push(0);\n                ch[i] = 1;\n            });\n        }\n    }\n    invalidateWith(reason) {\n        this.inv_reasons.push(reason);\n        return false;\n    }\n    clearInvMessageCache() {\n        this.inv_reasons.length = 0;\n    }\n    dateValid() {\n        return !Number.isNaN(Date.parse(this.date));\n    }\n    validateOutputs() {\n        if (this.hasNoOutputs())\n            return this.invalidateWith('No outputs');\n        if (!(this.decoder.output.channels.length\n            == this.decoder.output.matrix.length))\n            return this.invalidateWith('Output matrix dimensions do not match output channel count');\n        let inputs = this.decoder.output.matrix[0].length;\n        let valid = true;\n        let mixer_inputs = this.decoder.output.matrix.forEach(channel => {\n            if (channel.length != inputs)\n                valid = false;\n        });\n        if (!valid)\n            return this.invalidateWith('Irregular output matrix');\n        if (this.totalMatrixOutputs() != inputs)\n            return this.invalidateWith('Total Matrix output count does not match output channel count');\n        return true;\n    }\n    validateDecodingMatrices() {\n        if (!this.decoder.matrices.length)\n            return this.invalidateWith('No decoding matrices');\n        for (let i in this.decoder.filter) {\n            if (this.decoder.matrices.find(m => m.input == Number.parseInt(i)) == undefined)\n                return this.invalidateWith('Missing matrix for filter output ' + i);\n        }\n        for (let i in this.decoder.matrices) {\n            if (!this.decoder.matrices[i].valid())\n                return this.invalidateWith('Invalid matrix #' + i);\n        }\n        return true;\n    }\n}\n"],"file":"dotadd.js"}