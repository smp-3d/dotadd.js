{"version":3,"sources":["../build/dotadd.js"],"names":["Filter","constructor","high","low","Error","hi","lo","isLowpass","undefined","isHighpass","isBandpass","fromObject","obj","Normalisation","Object","freeze","N3D","SN3D","ACN","order","acn","Math","floor","sqrt","index","pow","Matrix","input","normalisation","channels","toLowerCase","length","csize","channel","matrix","setInput","getInput","numCoeffs","numChannels","setCoeffsForChannel","chan","coeffs","getCoeffsForChannel","ambisonicOrder","setNormalisation","getNormalisation","renormalizeTo","forEach","ch","coeff","cidx","AEDCoord","a","e","d","hasDistance","OutputChannel","name","type","options","description","coords","ret","assign","ADD","add","revision","pobj","String","JSON","parse","toString","decoder","filter","matrices","output","assign_if_valid","map","mat","_set","prop","val","validateProp","validator","from","to","assign_if_valid_recurse","me","props","hasOwnProperty","nextp","shift","export","valid","export_obj","author","date","Date","now","toISOString","version","flt","chs","Array","serialize","stringify","setAuthor","setName","setDescription","desc","setDate","setVersion","addMatrix","push","addFilter","addOutput","out","gain","maxAmbisonicOrder","max","totalMatrixOutputs","reduce","maxMatrixOutputs","createDefaultOutputs","midx","i","arr","fill","createDefaultSummedOutputs"],"mappings":"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","sourcesContent":["/**\n * The dotadd Filter class. Respresents a single filter band.\n */\nexport class Filter {\n    /**\n     * Construct a new Filterband. At least high or low must be given to construct a valid filter band object\n     * @param high beginning of the high frequency stopbband can be null\n     * @param low beginning of the high frequency stopbband can be null or omitted\n     */\n    constructor(high, low) {\n        if ((high == null) && (low == null))\n            throw new Error('Cannot construct a Filterband without frequencies');\n        if (high != null)\n            this.hi = high;\n        if (low != null)\n            this.lo = low;\n    }\n    isLowpass() {\n        return this.lo == undefined && this.hi != undefined;\n    }\n    isHighpass() {\n        return this.hi == undefined && this.lo != undefined;\n    }\n    isBandpass() {\n        return this.hi != undefined && this.lo != undefined;\n    }\n    static fromObject(obj) {\n        return new Filter(obj.hi, obj.lo);\n    }\n}\nexport const Normalisation = Object.freeze({\n    N3D: 'n3d',\n    SN3D: 'sn3d'\n});\n/**\n * Function to handle Ambisonic Channel Numbers (ACN)\n */\nexport const ACN = {\n    /**\n     * Get the Ambisonic Order (l) from an ACN\n     * @param acn ACN\n     */\n    order(acn) {\n        return Math.floor(Math.sqrt(acn));\n    },\n    /**\n     * Get the Ambisonic Index (n) from an ACN\n     * @param acn ACN\n     */\n    index(acn) {\n        let order = ACN.order(acn);\n        return acn - order * (order + 1);\n    },\n    /**\n     * Calculate an ACN from Order l and Index n\n     * @param order Ambisonic Order (l)\n     * @param index Ambisonic Index (n)\n     */\n    acn(order, index) {\n        return Math.pow(order, 2) * order + index;\n    }\n};\n/**\n * The dotadd Matrix class. Is holds the decoding matrix coefficents and a field\n * which specifies the input band it receives audio from\n */\nexport class Matrix {\n    /**\n     * Construct a new Matrix.\n     * @param {number} input the input band the matrix will receive signal from\n     * @param {number[][]} channels an array of array of coefficents for the output channels of the matrix.\n     */\n    constructor(input, normalisation, channels) {\n        this.input = input;\n        this.normalisation = normalisation.toLowerCase();\n        if (channels && channels.length) {\n            let csize = channels[0].length;\n            for (let channel of channels) {\n                if (channel.length != csize)\n                    throw new Error(\"channel size mismatch\");\n            }\n            this.matrix = channels;\n        }\n    }\n    /**\n     * Set the input band the Matrix will receive signal from\n     * @param {Number} input\n     */\n    setInput(input) {\n        this.input = input;\n    }\n    /**\n     * @returns {Number} the input channel this Matrix will receive signal from\n     */\n    getInput() {\n        return this.input;\n    }\n    /**\n     * @returns {Number} the input number of coeffs for each channel\n     */\n    numCoeffs() {\n        if (this.matrix)\n            return this.matrix[0].length;\n        else\n            return 0;\n    }\n    /**\n     * @returns the number of channels in the matrix\n     */\n    numChannels() {\n        if (this.matrix)\n            return this.matrix.length;\n        else\n            return 0;\n    }\n    /**\n     * set the coefficents for a channels in the Matrix\n     * @param {Number} chan the channel number to set\n     * @param {Array<Number>} coeffs an array of coefficents\n     */\n    setCoeffsForChannel(chan, coeffs) {\n        if (!(this.matrix))\n            this.matrix = [];\n        this.matrix[chan] = coeffs;\n    }\n    /**\n     * get the coefficents for a channel in the Matrix\n     * @param {number} chan the channel number\n     * @returns {number[]} an array of coefficents\n     */\n    getCoeffsForChannel(chan) {\n        if (!(this.matrix))\n            return;\n        return this.matrix[chan];\n    }\n    /**\n     * Get the Ambisonic Order (l) from this decoding matrix\n     */\n    ambisonicOrder() {\n        return ACN.order(this.numCoeffs() - 1);\n    }\n    /**\n     * Set the normalisation the matrix has. This will not change any values other than the 'normalisation' field\n     * @param normalisation the Normalisation type ('n3d' or 'sn3d')\n     */\n    setNormalisation(normalisation) {\n        this.normalisation = normalisation.toLowerCase();\n    }\n    /**\n     *\n     */\n    getNormalisation() {\n        return this.normalisation;\n    }\n    /**\n     * change the normalisation of the matrix values\n     * @param normalisation the new normalisation type ('n3d' or 'sn3d')\n     */\n    renormalizeTo(normalisation) {\n        normalisation = normalisation.toLowerCase();\n        if (this.normalisation == normalisation)\n            return;\n        if (normalisation === Normalisation.N3D) {\n            this.matrix.forEach((ch) => {\n                ch.forEach((coeff, cidx) => {\n                    ch[cidx] = coeff * (Math.sqrt(2 * ACN.order(cidx) + 1));\n                });\n            });\n        }\n        else if (normalisation === Normalisation.SN3D) {\n            this.matrix.forEach((ch) => {\n                ch.forEach((coeff, cidx) => {\n                    ch[cidx] = coeff / (Math.sqrt(2 * ACN.order(cidx) + 1));\n                });\n            });\n        }\n        this.normalisation = normalisation;\n        return this;\n    }\n    static fromObject(obj) {\n        return new Matrix(obj.input, obj.normalisation, obj.matrix);\n    }\n}\n/**\n * An AE(D) Coordinate. The distance value is optional\n */\nexport class AEDCoord {\n    /**\n     * construct a new AE(D) Coordinate\n     */\n    constructor(a, e, d) {\n        this.a = a;\n        this.e = e;\n        this.d = d;\n    }\n    /**\n     * true if the Coordinate has a distance value\n     */\n    hasDistance() {\n        return this.d != null;\n    }\n}\n/**\n * Output channel class. Represents a named output of an Ambisonic decoder.\n */\nexport class OutputChannel {\n    /**\n     *\n     * @param name name for the Output\n     * @param type type of output e.g. 'spk', 'sub', 'stereo-submix'\n     * @param options supply coordinates or a description for the output here\n     */\n    constructor(name, type, options) {\n        this.name = name;\n        this.type = type;\n        if (options) {\n            this.description = options.description;\n            this.coords = options.coords;\n        }\n    }\n    /**\n     * Create a new OutputChannel from a plain Javascript Object\n     */\n    static fromObject(obj) {\n        let ret = new OutputChannel(obj.name, obj.type);\n        if (obj.coords)\n            Object.assign(ret.coords, obj.coords);\n        if (obj.description)\n            ret.description = obj.description;\n        return ret;\n    }\n}\n/**\n * Where all the magic happens. The ADD Class.\n * Represents all properties of an ambisonic decoder that can be stored in a .add File\n */\nexport class ADD {\n    /**\n     * Construct a new ADD\n     * @param add\n     */\n    constructor(add) {\n        this.revision = 0;\n        let pobj = {};\n        if (typeof add == 'string' || add instanceof String)\n            pobj = JSON.parse(add.toString());\n        else if (add instanceof Object)\n            pobj = add;\n        this.decoder = { filter: [], matrices: [], output: { channels: [], matrix: [] } };\n        if (add) {\n            this.assign_if_valid(pobj, 'number', 'revision');\n            this.assign_if_valid(pobj, 'string', 'name');\n            this.assign_if_valid(pobj, 'string', 'author');\n            this.assign_if_valid(pobj, 'string', 'description');\n            this.assign_if_valid(pobj, 'string', 'date');\n            this.assign_if_valid(pobj, 'number', 'version');\n            if (pobj.decoder) {\n                if (pobj.decoder.filter)\n                    this.decoder.filter = pobj.decoder.filter.map(obj => Filter.fromObject(obj));\n                if (pobj.decoder.matrices)\n                    this.decoder.matrices = pobj.decoder.matrices.map(mat => Matrix.fromObject(mat));\n                if (pobj.decoder.output.channels && pobj.decoder.output.matrix) {\n                    this.decoder.output = {\n                        channels: pobj.decoder.output.channels.map(channel => OutputChannel.fromObject(channel)),\n                        matrix: pobj.decoder.output.matrix || []\n                    };\n                }\n            }\n        }\n    }\n    _set(prop, val) {\n        this[prop] = val;\n        return this;\n    }\n    validateProp(prop, validator) {\n        if (typeof validator == 'string')\n            return typeof prop == validator;\n        else\n            return validator(prop);\n    }\n    assign_if_valid(from, validator, ...prop) {\n        let to = this;\n        this.assign_if_valid_recurse(to, from, validator, prop);\n    }\n    assign_if_valid_recurse(me, from, validator, props) {\n        if (props.length === 1) {\n            if (from.hasOwnProperty(props[0]) && this.validateProp(from[props[0]], validator))\n                me[props[0]] = from[props[0]];\n        }\n        else {\n            let nextp = props.shift();\n            if (from.hasOwnProperty(nextp) && this.validateProp(from[nextp], 'object')) {\n                if (!me.hasOwnProperty(nextp))\n                    me[nextp] = {};\n                this.assign_if_valid_recurse(me[nextp], from[nextp], validator, props);\n            }\n        }\n    }\n    export() {\n        if (!this.valid())\n            throw new Error('Cannot export invalid ADD');\n        let export_obj = {\n            name: this.name,\n            description: this.description || \"created with the dotadd.js library\",\n            author: this.author || \"the dotadd library creators\",\n            date: this.date || new Date(Date.now()).toISOString(),\n            revision: this.revision,\n            version: this.version || 0,\n            decoder: {\n                filter: this.decoder.filter.map(flt => Filter.fromObject(flt)),\n                matrices: this.decoder.matrices.map(mat => {\n                    return {\n                        normalisation: mat.normalisation,\n                        input: mat.input,\n                        matrix: mat.matrix.map(chs => Array.from(chs))\n                    };\n                }),\n                output: {\n                    channels: this.decoder.output.channels.map(chan => OutputChannel.fromObject(chan)),\n                    matrix: this.decoder.output.matrix.map(chan => Array.from(chan))\n                }\n            },\n            serialize() {\n                return JSON.stringify(export_obj);\n            }\n        };\n        return export_obj;\n    }\n    setAuthor(author) { return this._set('author', author); }\n    setName(name) { return this._set('name', name); }\n    setDescription(desc) { return this._set('description', desc); }\n    setDate(date) { return this._set('date', new Date(date).toISOString()); }\n    setVersion(version) { return this._set('version', version); }\n    valid() {\n        return true;\n    }\n    addMatrix(mat) {\n        this.decoder.matrices.push(mat);\n    }\n    addFilter(flt) {\n        this.decoder.filter.push(flt);\n    }\n    addOutput(out, gain, index) {\n        if (gain == null)\n            gain = 1.0;\n        if (index == null)\n            index = this.decoder.output.channels.length;\n    }\n    maxAmbisonicOrder() {\n        return Math.max(...this.decoder.matrices.map(mat => mat.ambisonicOrder()));\n    }\n    totalMatrixOutputs() {\n        return this.decoder.matrices.reduce((val, mat) => val + mat.numChannels(), 0);\n    }\n    maxMatrixOutputs() {\n        return Math.max(...this.decoder.matrices.map(mat => mat.numChannels()));\n    }\n    createDefaultOutputs() {\n        this.decoder.matrices.forEach((mat, midx) => {\n            for (let i = 0; i < mat.numChannels(); ++i) {\n                this.decoder.output.channels.push(new OutputChannel(`DEFAULT_${midx}_${i}`, 'default'));\n                let arr = new Array(this.totalMatrixOutputs()).fill(0);\n                arr[i + ((midx) ? this.decoder.matrices[midx - 1].numChannels() : 0)] = 1.0;\n                this.decoder.output.matrix.push(arr);\n            }\n        });\n    }\n    createDefaultSummedOutputs() {\n        for (let i = 0; i < this.maxMatrixOutputs(); ++i) {\n            this.decoder.output.channels.push(new OutputChannel(`DEFAULT_${i}`, 'default'));\n            this.decoder.output.matrix[i] = new Array(this.totalMatrixOutputs()).fill(0);\n        }\n        this.decoder.matrices.forEach((mat, midx) => {\n            for (let i = 0; i < mat.numChannels(); ++i)\n                this.decoder.output.matrix[i][(i + ((midx) ? this.decoder.matrices[midx - 1].numChannels() : 0))] = 1.0;\n        });\n    }\n}\n"],"file":"dotadd.js"}